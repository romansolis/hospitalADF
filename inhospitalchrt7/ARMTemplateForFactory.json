{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "inhospitalchrt7"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "hospitallist"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DlyHosOccSurv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "ConditionalSplit2"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "ConditionalSplit3"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Sort3"
						},
						{
							"name": "Sort4"
						},
						{
							"name": "Sort5"
						},
						{
							"name": "Sort6"
						},
						{
							"name": "Sort7"
						},
						{
							"name": "Sort8"
						},
						{
							"name": "Sort9"
						},
						{
							"name": "Select2"
						}
					],
					"script": "source(output(\n\t\tcountry as string,\n\t\tindicator as string,\n\t\tdate as string,\n\t\tyear_week as string,\n\t\tvalue as string,\n\t\tsource as string,\n\t\turl as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 1)) ~> hospitallist\nhospitallist select(mapColumn(\n\t\tcountry,\n\t\tindicator,\n\t\tdate,\n\t\tyear_week,\n\t\tvalue,\n\t\tsource\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 split(source==\"Surveillance\",\n\tdisjoint: false) ~> ConditionalSplit1@(Surveillance, None)\nConditionalSplit1@Surveillance split(indicator=='Daily hospital occupancy',\n\tindicator=='Daily ICU occupancy',\n\tindicator=='Weekly new hospital admissions per 100k',\n\tindicator=='Weekly new ICU admissions per 100k',\n\tdisjoint: false) ~> ConditionalSplit2@(Dailyhospitaloccupancy, DailyICUoccupancy, Weeklynewhospitaladmissionsper100k, WeeklynewICUadmissionsper100k, Others)\nConditionalSplit2@Dailyhospitaloccupancy sort(desc(value, true),\n\tcaseInsensitive: true) ~> Sort1\nConditionalSplit1@None split(indicator=='Daily hospital occupancy',\n\tindicator=='Daily ICU occupancy',\n\tindicator=='Weekly new hospital admission per 100k',\n\tindicator=='Weekly new ICU admission per 100k',\n\tdisjoint: false) ~> ConditionalSplit3@(Dailyhospitaloccupancy1, DailyICUoccupancy1, Weeklynewhospitaladmissionsper100k1, WeeklynewICUadmissionsper100k1, others)\nConditionalSplit2@DailyICUoccupancy sort(desc(value, true)) ~> Sort2\nConditionalSplit2@Weeklynewhospitaladmissionsper100k sort(desc(value, true)) ~> Sort3\nConditionalSplit2@Others sort(desc(value, true)) ~> Sort4\nConditionalSplit2@WeeklynewICUadmissionsper100k sort(desc(value, true)) ~> Sort5\nConditionalSplit3@Dailyhospitaloccupancy1 sort(desc(value, true)) ~> Sort6\nConditionalSplit3@DailyICUoccupancy1 sort(desc(value, true)) ~> Sort7\nConditionalSplit3@Weeklynewhospitaladmissionsper100k1 sort(desc(value, true)) ~> Sort8\nConditionalSplit3@WeeklynewICUadmissionsper100k1 sort(desc(value, true)) ~> Sort9\nSort1 select(mapColumn(\n\t\tcountry,\n\t\tindicator,\n\t\tdate,\n\t\tyear_week,\n\t\tvalue,\n\t\tsource\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcountry as string,\n\t\tindicator as string,\n\t\tdate as string,\n\t\tyear_week as string,\n\t\tvalue as string,\n\t\tsource as string,\n\t\turl as string\n\t),\n\tpartitionFileNames:['DlyHosOccSurv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/DlyHosOccSurv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "hospital_admissions (3).csv",
						"container": "hospitalplaylist"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "indicator",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "year_week",
						"type": "String"
					},
					{
						"name": "value",
						"type": "String"
					},
					{
						"name": "source",
						"type": "String"
					},
					{
						"name": "url",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DlyHosOccSurv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "hospitalplaylist"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "indicator",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "year_week",
						"type": "String"
					},
					{
						"name": "value",
						"type": "String"
					},
					{
						"name": "source",
						"type": "String"
					},
					{
						"name": "url",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"hospitallist": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		}
	]
}